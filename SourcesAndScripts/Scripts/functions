#!/usr/bin/env bash
#
# functions
# Martin HrubÃ½ (hrubymar10), 2018-2024
#

set -e

check_wget() {
  if ! [ -x "$(command -v wget)" ]; then
    echo 'Error: wget is not installed. Use for example Homebrew and install it. See https://brew.sh/' >&2
    exit 1
  fi
}

check_pixman() {
  if ! [ -f "${LIBS_PATH}/libpixman-1.0.dylib" ]; then
    echo 'Error: pixman is not prepared. You must build all libraries in defined order.' >&2
    exit 1
  fi
}

check_fontconfig() {
  if ! [ -f "${LIBS_PATH}/libfontconfig.dylib" ]; then
    echo 'Error: fontconfig is not prepared. You must build all libraries in defined order.' >&2
    exit 1
  fi
}

check_freetype() {
  if ! [ -f "${LIBS_PATH}/libfreetype.dylib" ]; then
    echo 'Error: freetype is not prepared. You must build all libraries in defined order.' >&2
    exit 1
  fi
}

check_libpng() {
  if ! [ -f "${LIBS_PATH}/libpng.dylib" ]; then
    echo 'Error: libpng is not prepared. You must build all libraries in defined order.' >&2
    exit 1
  fi
}

check_libffi() {
  if ! [ -f "${LIBS_PATH}/libffi.dylib" ]; then
    echo 'Error: libffi is not installed or is not linked. Use Homebrew, install it and force link it. See https://brew.sh/' >&2
    exit 1
  fi
}

check_libwebp() {
  if ! [ -f "${LIBS_PATH}/libwebp.dylib" ]; then
    echo 'Error: libwebp is not prepared. You must build all libraries in defined order.' >&2
    exit 1
  fi
}

check_glib() {
  if ! [ -f "${LIBS_PATH}/libglib-2.0.0.dylib" ]; then
    echo 'Error: glib is not prepared. You must build all libraries in defined order.' >&2
    exit 1
  fi
}

check_gettext() {
  if ! [ -f "${LIBS_PATH}/libintl.dylib" ]; then
    echo 'Error: gettext is not prepared. You must build all libraries in defined order.' >&2
    exit 1
  fi
}

check_graphite2() {
  if ! [ -f "${LIBS_PATH}/libgraphite2.dylib" ]; then
    echo 'Error: graphite2 is not prepared. You must build all libraries in defined order.' >&2
    exit 1
  fi
}

check_cairo() {
  if ! [ -f "${LIBS_PATH}/libcairo.dylib" ]; then
    echo 'Error: cairo is not prepared. You must build all libraries in defined order.' >&2
    exit 1
  fi
}

check_harfbuzz() {
  if ! [ -f "${LIBS_PATH}/libharfbuzz.dylib" ]; then
    echo 'Error: harfbuzz is not prepared. You must build all libraries in defined order.' >&2
    exit 1
  fi
}

check_fribidi() {
  if ! [ -f "${LIBS_PATH}/libfribidi.dylib" ]; then
    echo 'Error: fribidi is not prepared. You must build all libraries in defined order.' >&2
    exit 1
  fi
}

check_libogg() {
  if ! [ -f "${LIBS_PATH}/libogg.dylib" ]; then
    echo 'Error: libogg is not prepared. You must build all libraries in defined order.' >&2
    exit 1
  fi
}

check_pcre() {
  if ! [ -f "${LIBS_PATH}/libpcre.dylib" ]; then
    echo 'Error: pcre is not prepared. You must build all libraries in defined order.' >&2
    exit 1
  fi
}

check_pcre2() {
  if ! [ -f "${LIBS_PATH}/libpcre2-8.0.dylib" ]; then
    echo 'Error: pcre2 is not prepared. You must build all libraries in defined order.' >&2
    exit 1
  fi
}

check_meson() {
  if ! [ -f "/opt/homebrew/bin/meson" ]; then
    echo 'Error: meson for arm64 is not installed in expected path /opt/homebrew/bin/meson. Use for example Homebrew and install it. See https://brew.sh/' >&2
    exit 1
  fi
  if ! [ -f "/opt/homebrew_x86_64/bin/meson" ]; then
    echo 'Error: meson for x86_64 is not installed in expected path /opt/homebrew_x86_64/bin/meson. Use for example Homebrew and install it. See https://brew.sh/' >&2
    exit 1
  fi
}

check_ninja() {
  if ! [ -f "/opt/homebrew/bin/ninja" ]; then
    echo 'Error: ninja for arm64 is not installed in expected path /opt/homebrew/bin/ninja. Use for example Homebrew and install it. See https://brew.sh/' >&2
    exit 1
  fi
  if ! [ -f "/opt/homebrew_x86_64/bin/ninja" ]; then
    echo 'Error: ninja for x86_64 is not installed in expected path /opt/homebrew_x86_64/bin/ninja. Use for example Homebrew and install it. See https://brew.sh/' >&2
    exit 1
  fi
}

check_cmake() {
  if ! [ -x "$(command -v cmake)" ]; then
    echo 'Error: cmake is not installed. Use for example Homebrew and install it. See https://brew.sh/' >&2
    exit 1
  fi
}

check_gsed() {
  if ! [ -x "$(command -v gsed)" ]; then
    echo 'Error: gnu-sed (gsed) is not installed. Use for example Homebrew and install it. See https://brew.sh/' >&2
    exit 1
  fi
}

check_pkg_config() {
  if ! [ -x "$(command -v pkg-config)" ]; then
    echo 'Error: pkg-config is not installed. Use for example Homebrew and install it. See https://brew.sh/' >&2
    exit 1
  fi
}

check_sdl2_sources() {
  if ! [ -d "${SOURCES_PATH}/SDL2/SDL" ]; then
    echo 'Error: SDL2 sources are not prepared. You must build SDL2 first.' >&2
    exit 1
  fi
}

remove_rpath_if_exists() {
  DYLIB=$1
  PATH_TO_REMOVE=$2
  PATHS=$(otool -l "${DYLIB}" | grep "RPATH" -A2 | grep "path" | awk '{print $2;}')

  if [[ ${PATHS} == *"${PATH_TO_REMOVE}"* ]]; then
    ACTUAL_PATH=$(otool -l "${DYLIB}" | grep "RPATH" -A2 | grep "path" | awk '{print $2;}' | grep "${PATH_TO_REMOVE}" | head -1)
    install_name_tool -delete_rpath "${ACTUAL_PATH}" ${DYLIB}
  fi
}

get_src_and_verify_checksum() {
  NAME=$1
  SHA256=$2
  URL=$3
  OUT_PATH="${SOURCES_PATH}/archives"

  mkdir -p "${OUT_PATH}"

  if [ -f "${OUT_PATH}/${NAME}" ]; then
    SHA256_TO_VERIFY=$(shasum -a 256 "${OUT_PATH}/${NAME}" | awk '{print $1;}')
    if [[ "${SHA256}" == "${SHA256_TO_VERIFY}" ]]; then
      echo "==> Local file ${NAME} with valid SHA256 already exists"
      return
    else
      echo "==> SHA256 of local file ${NAME} differs... Downloading again..."
      rm -rf "${OUT_PATH}/${NAME}"
    fi
  fi

  wget -O "${OUT_PATH}/${NAME}" "${URL}"
  SHA256_TO_VERIFY=$(shasum -a 256 "${OUT_PATH}/${NAME}" | awk '{print $1;}')
  if ! [[ "${SHA256}" == "${SHA256_TO_VERIFY}" ]]; then
    echo "==> SHA256 of local file ${NAME} differs... Exitting..." >&2
    echo "==> SHA256 = ${SHA256}" >&2
    echo "==> actual = ${SHA256_TO_VERIFY}" >&2
    exit 1
  fi
}

generate_pkgconfig_file() {
  NAME=$1
  VERSION=$2

  if ! [ -f "${PKG_CONFIG_PATH}/${NAME}.pc.template" ]; then
    echo "Error: pkgconfig template for ${NAME} doesn't exist" >&2
    exit 1
  fi

  rm -rf "${PKG_CONFIG_PATH}/${NAME}.pc"
  cp "${PKG_CONFIG_PATH}/${NAME}.pc.template" "${PKG_CONFIG_PATH}/${NAME}.pc"
  /usr/bin/sed -i '' "s:prefix=PATH:prefix=${ROOT_PATH}:" "${PKG_CONFIG_PATH}/${NAME}.pc"
  /usr/bin/sed -i '' "s/Version: VERSION/Version: ${VERSION}/" "${PKG_CONFIG_PATH}/${NAME}.pc"
}

is_apple_silicon_mac() {
  if [ "$(uname -s)" = Darwin ]; then
    if [[ "$(/usr/sbin/sysctl -n machdep.cpu.brand_string)" == *"Apple"* ]]; then
      true
    else
      false
    fi
  else
    false
  fi
}

time_interval_to_string() {
  local START=$1
  local END=$2

  declare -i timestamp
  declare -i days
  declare -i hours
  declare -i minutes
  declare -i seconds
  timestamp=$END-$START

  days=$timestamp/60/60/24
  hours=$((($timestamp-($days*60*60*24))/60/60))
  minutes=$((($timestamp-($days*60*60*24)-($hours*60*60))/60))
  seconds=$((($timestamp-($days*60*60*24)-($hours*60*60)-($minutes*60))))
  if [ $days -eq 0 ]; then
    if [ $hours -eq 0 ]; then
      if [ $minutes -eq 0 ]; then
        echo "==> Operation took $seconds seconds ..."
      else
        echo "==> Operation took $minutes minutes and $seconds seconds ..."
      fi
    else
      echo "==> Operation took $hours hours $minutes minutes and $seconds seconds ..."
    fi
  else
    echo "==> Operation took $days days $hours hours $minutes minutes and $seconds seconds ..."
  fi
}
