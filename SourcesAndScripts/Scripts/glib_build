#!/usr/bin/env bash
#
# glib_build
# Martin HrubÃ½ (hrubymar10), 2018-2024
#

set -e

GLIB_VERSION="2.83.0"
GLIB_VERSION_SHORT="2.83"
SHA256="a07d9e1a57a4279c5ece71c26dc44eea12bd518ea9ff695d53e722997032b614"

starttimestamp=$(date +%s)

MY_PATH=$(cd `dirname ${0}` && pwd)
if [ -z "${MY_PATH}" ] ; then
  # error; for some reason, the path is not accessible
  # to the script (e.g. permissions re-evaled after suid)
  echo 'Error: Script path is for some reason not accessible' >&2
  exit 1  # fail
fi

source "${MY_PATH}/env"
source "${MY_PATH}/functions"

check_wget
check_meson
check_ninja
check_pcre2
check_libffi
check_gettext
check_pkg_config

if ! is_apple_silicon_mac; then
  echo "Error: Glib requires Apple Silicon mac to build universal libs" >&2
  exit 1
fi

cd "${SOURCES_PATH}"
rm -rf "glib"*
get_src_and_verify_checksum "glib-${GLIB_VERSION}.tar.xz" "${SHA256}" "https://download.gnome.org/sources/glib/${GLIB_VERSION_SHORT}/glib-${GLIB_VERSION}.tar.xz"
tar xf "${SOURCES_PATH}/archives/glib-${GLIB_VERSION}.tar.xz" -C .
cp -R "glib-${GLIB_VERSION}" "glib-${GLIB_VERSION}-arm64"
mv "glib-${GLIB_VERSION}" "glib-${GLIB_VERSION}-x86_64"
ln -s "glib-${GLIB_VERSION}-x86_64" "glib"

# Build x86_64
cd "${SOURCES_PATH}/glib-${GLIB_VERSION}-x86_64"
source "${MY_PATH}/env"
unset MACOSX_DEPLOYMENT_TARGET
export LDFLAGS="${LDFLAGS_X86_64}"
export CFLAGS="${CFLAGS_X86_64} -Wno-implicit-function-declaration"
export CXXFLAGS="${CXXFLAGS_X86_64} -Wno-implicit-function-declaration"
mkdir -p "build/glib"
arch -x86_64 /opt/homebrew_x86_64/bin/meson setup --wrap-mode=nofallback -Dbsymbolic_functions=false -Ddtrace=false -Dtests=false -Dinstalled_tests=false --default-library=shared --buildtype=release . "build"
cd "build/glib"
ln -s "${LIBS_PATH}/libpcre2-8.0.dylib" "libpcre2-8.dylib"
ln -s "${LIBS_PATH}/libintl.8.dylib"
cd ..
arch -x86_64 /opt/homebrew_x86_64/bin/ninja

# Build arm64
cd "${SOURCES_PATH}/glib-${GLIB_VERSION}-arm64"
source "${MY_PATH}/env"
unset MACOSX_DEPLOYMENT_TARGET
export LDFLAGS="${LDFLAGS_ARM64}"
export CFLAGS="${CFLAGS_ARM64} -Wno-implicit-function-declaration"
export CXXFLAGS="${CXXFLAGS_ARM64} -Wno-implicit-function-declaration"
mkdir -p "build/glib"
arch -arm64 /opt/homebrew/bin/meson setup --wrap-mode=nofallback -Dbsymbolic_functions=false -Ddtrace=false -Dtests=false -Dinstalled_tests=false --default-library=shared --buildtype=release . "build"
cd "build/glib"
ln -s "${LIBS_PATH}/libpcre2-8.0.dylib" "libpcre2-8.dylib"
ln -s "${LIBS_PATH}/libintl.8.dylib"
cd ..
arch -arm64 /opt/homebrew/bin/ninja

mkdir "glib-${GLIB_VERSION}-RELEASE"
cd "glib-${GLIB_VERSION}-RELEASE"
lipo -create "${SOURCES_PATH}/glib-${GLIB_VERSION}-arm64/build/glib/libglib-2.0.0.dylib" "${SOURCES_PATH}/glib-${GLIB_VERSION}-x86_64/build/glib/libglib-2.0.0.dylib" -output "libglib-2.0.0.dylib"
lipo -create "${SOURCES_PATH}/glib-${GLIB_VERSION}-arm64/build/gmodule/libgmodule-2.0.0.dylib" "${SOURCES_PATH}/glib-${GLIB_VERSION}-x86_64/build/gmodule/libgmodule-2.0.0.dylib" -output "libgmodule-2.0.0.dylib"
lipo -create "${SOURCES_PATH}/glib-${GLIB_VERSION}-arm64/build/gobject/libgobject-2.0.0.dylib" "${SOURCES_PATH}/glib-${GLIB_VERSION}-x86_64/build/gobject/libgobject-2.0.0.dylib" -output "libgobject-2.0.0.dylib"
lipo -create "${SOURCES_PATH}/glib-${GLIB_VERSION}-arm64/build/gthread/libgthread-2.0.0.dylib" "${SOURCES_PATH}/glib-${GLIB_VERSION}-x86_64/build/gthread/libgthread-2.0.0.dylib" -output "libgthread-2.0.0.dylib"
lipo -create "${SOURCES_PATH}/glib-${GLIB_VERSION}-arm64/build/gio/libgio-2.0.0.dylib" "${SOURCES_PATH}/glib-${GLIB_VERSION}-x86_64/build/gio/libgio-2.0.0.dylib" -output "libgio-2.0.0.dylib"
for filename in * ; do
  install_name_tool -id "@rpath/${filename}" "${filename}"
  remove_rpath_if_exists "${filename}" "@loader_path/../glib"
  remove_rpath_if_exists "${filename}" "@loader_path/../gmodule"
  remove_rpath_if_exists "${filename}" "@loader_path/../gobject"
  remove_rpath_if_exists "${filename}" "${LIBS_PATH}"
done
rm -rf "${LIBS_PATH}/libglib-2.0.0.dylib" "${LIBS_PATH}/libgmodule-2.0.0.dylib" "${LIBS_PATH}/libgobject-2.0.0.dylib" "${LIBS_PATH}/libgthread-2.0.0.dylib" "${LIBS_PATH}/libgio-2.0.0.dylib" "${LIBS_PATH}/libglib-2.0.dylib" "${LIBS_PATH}/libgmodule-2.0.dylib" "${LIBS_PATH}/libgobject-2.0.dylib" "${LIBS_PATH}/libgthread-2.0.dylib" "${LIBS_PATH}/libgio-2.0.dylib"
cp -rf * "${LIBS_PATH}/"
ln -s "libglib-2.0.0.dylib" "${LIBS_PATH}/libglib-2.0.dylib"
ln -s "libgmodule-2.0.0.dylib" "${LIBS_PATH}/libgmodule-2.0.dylib"
ln -s "libgobject-2.0.0.dylib" "${LIBS_PATH}/libgobject-2.0.dylib"
ln -s "libgthread-2.0.0.dylib" "${LIBS_PATH}/libgthread-2.0.dylib"
ln -s "libgio-2.0.0.dylib" "${LIBS_PATH}/libgio-2.0.dylib"
rm -rf "${HEADERS_PATH}/glib"*
mkdir -p "${HEADERS_PATH}/glib-2.0/gio"
mkdir -p "${HEADERS_PATH}/glib-2.0/glib/deprecated"
mkdir -p "${HEADERS_PATH}/glib-2.0/gmodule"
mkdir -p "${HEADERS_PATH}/glib-2.0/gobject"
# TODO: Use glib-public-headers.txt and etc for Headers
cp "${SOURCES_PATH}/glib/build/glib/glibconfig.h" "${HEADERS_PATH}/glibconfig_x86_64.h"
cp "${SOURCES_PATH}/glib-${GLIB_VERSION}-arm64/build/glib/glibconfig.h" "${HEADERS_PATH}/glibconfig_arm64.h"
printf "#ifdef __x86_64__\n#include \"glibconfig_x86_64.h\"\n#else\n#include \"glibconfig_arm64.h\"\n#endif\n" > "${HEADERS_PATH}/glibconfig.h"
cp "${SOURCES_PATH}/glib/build/gobject/glib-enumtypes.h" "${HEADERS_PATH}/glib-2.0/gobject/glib-enumtypes.h"
cp "${SOURCES_PATH}/glib/build/gio/gioenumtypes.h" "${HEADERS_PATH}/glib-2.0/gio/gioenumtypes.h"
cd "${SOURCES_PATH}/glib/glib"
cp "glib-object.h" "glib-unix.h" "glib.h" "${HEADERS_PATH}/glib-2.0/"
cp "${SOURCES_PATH}/glib/glib/"*.h "${HEADERS_PATH}/glib-2.0/glib/"
cp "${SOURCES_PATH}/glib/build/glib/glib-visibility.h" "${HEADERS_PATH}/glib-2.0/glib/"
cp "${SOURCES_PATH}/glib/build/glib/gversionmacros.h" "${HEADERS_PATH}/glib-2.0/glib/"
cp "${SOURCES_PATH}/glib/glib/deprecated/"*.h "${HEADERS_PATH}/glib-2.0/glib/deprecated/"
cp "${SOURCES_PATH}/glib/gio/"*.h "${HEADERS_PATH}/glib-2.0/gio/"
cp "${SOURCES_PATH}/glib/build/gio/gio-visibility.h" "${HEADERS_PATH}/glib-2.0/gio/"
cp "${SOURCES_PATH}/glib/gmodule/gmodule.h" "${HEADERS_PATH}/glib-2.0/"
cp "${SOURCES_PATH}/glib/build/gmodule/gmodule-visibility.h" "${HEADERS_PATH}/glib-2.0/gmodule/"
cp "${SOURCES_PATH}/glib/gobject/"*.h "${HEADERS_PATH}/glib-2.0/gobject/"
cp "${SOURCES_PATH}/glib/build/gobject/gobject-visibility.h" "${HEADERS_PATH}/glib-2.0/gobject/"
generate_pkgconfig_file "glib-2.0" "${GLIB_VERSION}"
generate_pkgconfig_file "gio-2.0" "${GLIB_VERSION}"
generate_pkgconfig_file "gobject-2.0" "${GLIB_VERSION}"
echo "==> DONE ..."
echo ""
time_interval_to_string "${starttimestamp}" "$(date +%s)"
echo ""
